# src/models/users/router.py

from fastapi import APIRouter
from sqlalchemy import select
from src.api.dependencies import SessionDep
from src.components.users.models import UsersORM
from src.components.users.schemas import UserRead, UserCreate, UserAccount

router = APIRouter()

@router.get("/get_users",
            tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            response_model=list[UserRead] # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
            )
async def get_users(session: SessionDep):

    query = select(UsersORM)
    result = await session.execute(query)
    users = result.scalars().all()
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    return users

@router.get("/get_user/{user_id}",
            tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
            summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            response_model=UserAccount # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
            )
async def get_single_user(session: SessionDep, user_id: int):
    query = (
        select(UsersORM)
        .where(UsersORM.id == user_id)
    )
    result = await session.execute(query)
    user = result.scalars().one()
    return user

@router.post(
        "/create_user",
        tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        summary="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        response_model=UserRead
        )
async def create_new_user(
    session: SessionDep, 
    user_data: UserCreate
    ):
    # 1. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º Pydantic-—Å—Ö–µ–º—É –≤ –æ–±—ã—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    user_data_dict = user_data.model_dump()
    
    # 2. "–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º" —Ñ–ª–∞–≥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è. –¢–µ–ø–µ—Ä—å –≤ user_data_dict –µ–≥–æ –Ω–µ—Ç.
    remember_me = user_data_dict.pop("remember_me_flag")
    
    # --- –í–æ—Ç –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥ –¥–ª—è —Å–≤–æ–µ–π –ª–æ–≥–∏–∫–∏ ---
    print(f"–§–ª–∞–≥ '–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è' –ø–æ–ª—É—á–µ–Ω: {remember_me}")
    if remember_me:
        print("–ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏–π —Ç–æ–∫–µ–Ω!")
    else:
        print("–ù—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—â–∏–π —Ç–æ–∫–µ–Ω.")
    # -------------------------------------------------------------

    # 3. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ORM —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    new_user = UsersORM(**user_data_dict)
    
    session.add(new_user)
    await session.commit()
    await session.refresh(new_user)

    # 4. –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    # –¢–∞–∫ –∫–∞–∫ response_model=UserRead —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ—Ç —Ñ–ª–∞–≥, –º—ã –¥–æ–ª–∂–Ω—ã –µ–≥–æ "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å"
    # –∫ –æ–±—ä–µ–∫—Ç—É new_user –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ FastAPI –µ–≥–æ –≤–µ—Ä–Ω–µ—Ç.
    setattr(new_user, "remember_me_flag", remember_me)

    return new_user

