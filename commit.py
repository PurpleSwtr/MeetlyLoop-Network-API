import os
import subprocess
import sys

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, Prompt

console = Console()

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï GIT-–§–£–ù–ö–¶–ò–ò ---

def get_current_branch(working_dir):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ç–∫—É Git."""
    try:
        result = subprocess.run(["git", "branch", "--show-current"], cwd=working_dir, check=True, capture_output=True, text=True, encoding='utf-8')
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None

def branch_exists_locally(branch_name, working_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—Ç–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    try:
        result = subprocess.run(["git", "branch", "--list", branch_name], cwd=working_dir, capture_output=True, text=True, check=True, encoding='utf-8')
        return bool(result.stdout.strip())
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def remote_branch_exists(branch_name, remote_name, working_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—Ç–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ."""
    try:
        result = subprocess.run(["git", "ls-remote", "--heads", remote_name, branch_name], cwd=working_dir, capture_output=True, text=True, check=True, encoding='utf-8')
        return bool(result.stdout.strip())
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def get_upstream_branch(branch_name, working_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ç–∫–∏ 'upstream' (—Å–≤—è–∑—å —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π)."""
    try:
        # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–ø–∞–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ upstream –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        result = subprocess.run(["git", "rev-parse", "--abbrev-ref", f"{branch_name}@{{u}}"], cwd=working_dir, check=True, capture_output=True, text=True, encoding='utf-8')
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None
        
def run_command(command, working_dir):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    console.print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è—é: [bold cyan]{' '.join(command)}[/bold cyan]")
    try:
        result = subprocess.run(command, cwd=working_dir, check=True, capture_output=True, text=True, encoding='utf-8')
        if result.stdout:
            console.print(Panel(result.stdout.strip(), title="[green]–í—ã–≤–æ–¥[/green]", title_align="left", border_style="green"))
        if result.stderr:
            console.print(Panel(result.stderr.strip(), title="[yellow]–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è[/yellow]", title_align="left", border_style="yellow"))
        return True
    except FileNotFoundError:
        console.print(f"[bold red]‚ùå –û—à–∏–±–∫–∞: –ö–æ–º–∞–Ω–¥–∞ '{command[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/bold red]")
        return False
    except subprocess.CalledProcessError as e:
        error_message = e.stderr.strip() if e.stderr else e.stdout.strip()
        console.print(Panel(f"[bold]–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {e.returncode}):[/bold]\n\n{error_message}", title="[bold red]–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è[/bold red]", title_align="left", border_style="red"))
        return False

# --- "–ú–û–ó–ì" –°–ö–†–ò–ü–¢–ê ---

def check_and_switch_branch(branch_name, working_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ç–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å/–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–µ–µ."""
    if branch_exists_locally(branch_name, working_dir):
        # –í–µ—Ç–∫–∞ —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        return run_command(["git", "checkout", branch_name], working_dir)

    console.print(f"[yellow]–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ '[bold]{branch_name}[/bold]' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.[/yellow]")
    console.print("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (`git fetch`)...")
    if not run_command(["git", "fetch", "origin"], working_dir):
        return False

    if remote_branch_exists(branch_name, "origin", working_dir):
        # –°—Ü–µ–Ω–∞—Ä–∏–π: –í–µ—Ç–∫–∞ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ
        console.print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ 'origin/{branch_name}'.")
        if Confirm.ask(f"–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É '[bold]{branch_name}[/bold]' –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–µ—ë?"):
            return run_command(["git", "checkout", branch_name], working_dir)
        else:
            console.print("[red]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/red]")
            return False
    else:
        # –°—Ü–µ–Ω–∞—Ä–∏–π: –í–µ—Ç–∫–∏ –Ω–µ—Ç –Ω–∏–≥–¥–µ
        console.print(f"‚ùå –£–¥–∞–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞ '[bold]{branch_name}[/bold]' —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        if Confirm.ask(f"–°–æ–∑–¥–∞—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ç–∫—É '[bold]{branch_name}[/bold]'?"):
            return run_command(["git", "checkout", "-b", branch_name], working_dir)
        else:
            console.print("[red]–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.[/red]")
            return False

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

def main():
    repo_path = os.path.dirname(os.path.abspath(__file__))
    
    current_branch = get_current_branch(repo_path)
    header_text = f"–ó–∞–ø—É—Å–∫ Git-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n[cyan]{repo_path}[/cyan]\n"
    if current_branch:
        header_text += f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: [bold yellow]{current_branch}[/bold yellow]"
    
    console.print(Panel(header_text, title="[bold magenta]üöÄ Git-–ê–≤—Ç–æ–º–∞—Ç–æ—Ä[/bold magenta]", expand=False, border_style="magenta"))
    
    if not current_branch:
        console.print("[bold red]–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.[/bold red]"); sys.exit(1)

    commit_message = Prompt.ask("[bold yellow]üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞[/bold yellow]")
    target_branch = Prompt.ask("[bold yellow]üéØ –í –∫–∞–∫—É—é –≤–µ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?[/bold yellow]", default="dev")
    console.print(f"–í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ç–∫–∞ –¥–ª—è –ø—É—à–∞: [bold green]{target_branch}[/bold green]"); console.print("-" * 30)

    if current_branch != target_branch:
        if not check_and_switch_branch(target_branch, repo_path):
            console.print("\n[bold red]--- üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –≤–µ—Ç–∫—É. ---[/bold red]\n"); sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å --set-upstream –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—É—à–∞
    is_new_branch = not get_upstream_branch(target_branch, repo_path)
    push_command = ["git", "push"]
    if is_new_branch:
        push_command.extend(["--set-upstream", "origin", target_branch])
        console.print(f"[bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ:[/bold yellow] –í–µ—Ç–∫–∞ '[bold]{target_branch}[/bold]' –Ω–æ–≤–∞—è. –ü–µ—Ä–≤—ã–π –ø—É—à –±—É–¥–µ—Ç —Å —Ñ–ª–∞–≥–æ–º `--set-upstream`.")

    commands = [
        ["git", "add", "."],
        ["git", "commit", "-m", commit_message],
        push_command
    ]

    for cmd in commands:
        if not run_command(cmd, repo_path):
            console.print(f"\n[bold red]--- üõë –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. ---[/bold red]\n"); sys.exit(1)
        console.print()

    console.print("\n[bold green]--- ‚ú® –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! ---[/bold green]\n")

if __name__ == "__main__":
    main()