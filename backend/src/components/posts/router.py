from fastapi import APIRouter
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from .schemas import PostRead, PostCreate

from src.api.dependencies import SessionDep
from src.components.posts.models import PostsORM

router = APIRouter()

@router.get("/get_posts",
            tags=["üìù –ü–æ—Å—Ç—ã"],
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞–º–∏",
            response_model=list[PostRead]) # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
async def get_posts(session: SessionDep):
    query = (
        select(PostsORM)
        .options(selectinload(PostsORM.author)) # "–∂–∞–¥–Ω–æ" –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
        .order_by(PostsORM.created_at.desc()) # —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
    )
    result = await session.execute(query)
    posts = result.scalars().all()
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {posts}")
    return posts


@router.get("/get_posts/user/{user_id}",
            tags=["üìù –ü–æ—Å—Ç—ã"],
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            response_model=list[PostRead]) # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
async def get_posts_user(session: SessionDep, user_id: int):
    query = (
        select(PostsORM)
        .where(PostsORM.user_id == user_id)
        .options(selectinload(PostsORM.author))
        .order_by(PostsORM.created_at.desc())
    )
    result = await session.execute(query)
    posts = result.scalars().all()
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {posts}")
    return posts


@router.post(
        "/create_post",
        tags=["üìù –ü–æ—Å—Ç—ã"],
        summary="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç",
        response_model=PostRead
        )
async def create_new_post(session: SessionDep, post_data: PostCreate):
    new_post = PostsORM(**post_data.model_dump())
    session.add(new_post)
    await session.commit()

    query = (
        select(PostsORM)
        .where(PostsORM.id == new_post.id)
        .options(selectinload(PostsORM.author))
    )
    result = await session.execute(query)

    created_post_with_author = result.scalars().one()

    return created_post_with_author