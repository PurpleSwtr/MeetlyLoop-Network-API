# src/models/users/router.py

import asyncio
from fastapi import APIRouter, HTTPException, Response, status
from sqlalchemy import or_, select
from src.api.dependencies import SessionDep

from src.components.users.models import UsersORM
from src.components.users.schemas import UserRead, UserCreate, UserAccount

from src.components.service.password_hasher import hash_password

from src.components.service.auth_service import create_token, security

router = APIRouter()

@router.get("/get_users",
            tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            response_model=list[UserRead] # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
            )
async def get_users(session: SessionDep):

    query = select(UsersORM)
    result = await session.execute(query)
    users = result.scalars().all()
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    return users

@router.get("/get_user/{user_id}",
            tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
            summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            response_model=UserAccount # <-- –°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞
            )
async def get_single_user(session: SessionDep, user_id: int):
    query = (
        select(UsersORM)
        .where(UsersORM.id == user_id)
    )
    result = await session.execute(query)
    user = result.scalars().one()
    return user

@router.post(
        "/create_user",
        tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        summary="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        response_model=UserRead,
        status_code=status.HTTP_201_CREATED
        )
async def create_new_user(
    session: SessionDep, 
    user_data: UserCreate,
    response: Response
):
    # --- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    query = select(UsersORM).where(
        or_(UsersORM.nickname == user_data.nickname, UsersORM.email == user_data.email)
    )
    if await session.scalar(query):
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )

    # --- –®–∞–≥ 2: –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å ---
    hashed_password = await asyncio.to_thread(hash_password, user_data.password)
    
    # --- –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º ORM-–æ–±—ä–µ–∫—Ç, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è ---
    # .model_dump(exclude={"password", "remember_me_flag"}) —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
    # –±–µ–∑ –ø–∞—Ä–æ–ª—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ –∏ –±–µ–∑ —Ñ–ª–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –Ω—É–∂–µ–Ω –≤ –ë–î.
    user_data_for_db = user_data.model_dump(
        exclude={"password", "remember_me_flag"}
    )
    
    new_user = UsersORM(
        **user_data_for_db,
        password=hashed_password # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
    )
    
    # --- –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    session.add(new_user)
    await session.commit()
    await session.refresh(new_user)

    # --- –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    create_token(
        user_id=new_user.id,
        response=response,
        remember_me=user_data.remember_me_flag # –ë–µ—Ä–µ–º —Ñ–ª–∞–≥ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Pydantic-–º–æ–¥–µ–ª–∏
    )

    return new_user

