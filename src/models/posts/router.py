# from fastapi import APIRouter
# from sqlalchemy import select, insert

# from src.api.dependencies import SessionDep
# from src.models.posts.model import PostsORM

# router = APIRouter()

# @router.get("/get_posts",
#             tags=["üìù –ü–æ—Å—Ç—ã"],
#             summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤")
# async def get_posts(session: SessionDep):
#     query = select(PostsORM)
#     result = await session.execute(query)
#     posts = result.scalars().all()
#     return posts

# @router.post("/create_post",
#             tags=["üìù –ü–æ—Å—Ç—ã"],
#             summary="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
# async def create_new_post(session: SessionDep, user_id: int, title: str, description: str, theme: str): 
#     stmt = insert(PostsORM).values(
#         user_id=user_id,
#         title=title,
#         description=description,
#         theme=theme
#     )
#     await session.execute(stmt)
#     await session.commit()
#     return {"status": "success", "title": title}

from fastapi import APIRouter
from sqlalchemy import select, insert
# --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ---
from sqlalchemy.orm import selectinload
from typing import List
from .schemas import PostRead
# --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–ô ---

from src.api.dependencies import SessionDep
from src.models.posts.model import PostsORM

router = APIRouter()

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ ---
@router.get("/get_posts",
            tags=["üìù –ü–æ—Å—Ç—ã"],
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –∞–≤—Ç–æ—Ä–∞–º–∏",
            response_model=List[PostRead]) # <-- –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞
async def get_posts(session: SessionDep):
    # .options(selectinload(PostsORM.author)) - "–∂–∞–¥–Ω–æ" –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
    # .order_by(...) - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
    query = (
        select(PostsORM)
        .options(selectinload(PostsORM.author))
        .order_by(PostsORM.created_at.desc())
    )
    result = await session.execute(query)
    posts = result.scalars().all()
    return posts
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

@router.post("/create_post",
            tags=["üìù –ü–æ—Å—Ç—ã"],
            summary="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def create_new_post(session: SessionDep, user_id: int, title: str, description: str, theme: str | None = None):
    # –î–æ–±–∞–≤–ª—è–µ–º created_at –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    from datetime import datetime
    stmt = insert(PostsORM).values(
        user_id=user_id,
        title=title,
        description=description,
        theme=theme,
        created_at=datetime.utcnow() # <-- –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    )
    await session.execute(stmt)
    await session.commit()
    return {"status": "success", "title": title}