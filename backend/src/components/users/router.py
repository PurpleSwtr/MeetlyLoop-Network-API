# src/models/users/router.py

import asyncio
from typing import Any
from authx import TokenPayload
from fastapi import APIRouter, Depends, HTTPException, Response, status
from sqlalchemy import or_, select
from src.api.dependencies import SessionDep

from src.components.users.models import UsersORM
from src.components.users.schemas import UserRead, UserCreate, UserAccount, UserPublicProfile
from src.components.users import services as user_services
from src.components.service.password_hasher import hash_password

from src.components.service.auth_service import create_token, security


router = APIRouter(prefix="/users", tags=["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])

@router.get("/get_users",
            summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            response_model=list[UserRead]
            )
async def get_users(session: SessionDep):

    query = select(UsersORM)
    result = await session.execute(query)
    users = result.scalars().all()
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}")
    return users

# FIXME:
"""
    –ù–µ–ª—å–∑—è –≤ —Ü–µ–ª–æ–º –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –¢–∞–∫ –µ–≥–æ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫—Ç–æ —É–≥–æ–¥–Ω–æ, —á—Ç–æ –≤ —Ü–µ–ª–æ–º –æ–ø–∞—Å–Ω–æ...
"""
@router.get("/get_user/{user_id}",
            summary="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            response_model=UserPublicProfile
            )
async def get_single_user(session: SessionDep, user_id: int):
    query = (
        select(UsersORM)
        .where(UsersORM.id == user_id)
    )
    result = await session.execute(query)
    user = result.scalars().one()
    return user


@router.get("/me", 
            summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
            response_model=UserPublicProfile
            )
async def get_current_user(
    session: SessionDep,
    payload: Any = Depends(security.access_token_required)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —á–µ–π JWT —Ç–æ–∫–µ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.
    """
    user_id_from_token = payload.sub
    
    user_id = int(user_id_from_token)
    
    query = select(UsersORM).where(UsersORM.id == user_id)
    user = await session.scalar(query)
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
        
    return user

@router.post(
        "/create_user",
        summary="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        response_model=UserRead,
        status_code=status.HTTP_201_CREATED
        )
async def create_new_user(
    session: SessionDep, 
    user_data: UserCreate,
):
    new_user = await user_services.create_user_account(
        session=session, user_data=user_data
    )
    return new_user

