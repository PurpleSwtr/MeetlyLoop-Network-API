"""annotated_v1

Revision ID: 6fa40f040365
Revises: e38de6c3621a
Create Date: 2025-08-12 16:33:24.513086

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6fa40f040365"
down_revision: Union[str, Sequence[str], None] = "e38de6c3621a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "posts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("TIMEZONE('utc', now())"),
        existing_nullable=True,
    )
    op.alter_column(
        "posts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("TIMEZONE('utc', now())"),
        existing_nullable=True,
    )
    op.drop_constraint(op.f("posts_user_id_fkey"), "posts", type_="foreignkey")
    op.create_foreign_key(
        None, "posts", "users", ["user_id"], ["id"], ondelete="CASCADE"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "posts", type_="foreignkey")
    op.create_foreign_key(
        op.f("posts_user_id_fkey"), "posts", "users", ["user_id"], ["id"]
    )
    op.alter_column(
        "posts",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        server_default=None,
        existing_nullable=True,
    )
    op.alter_column(
        "posts",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        server_default=None,
        existing_nullable=True,
    )
    # ### end Alembic commands ###
